name: Deploy to Amazon ECS

on:
  pull_request:
    branches:
      - prod-deploy
    types: [closed]

env:
  AWS_REGION: eu-central-1 # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: mrsethsamuel-api-prod # set this to your Amazon ECS service name
  ECS_CLUSTER: mrsethsamuel-cluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: TaskDefinition.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: mrsethsamuel-api # set this to the name of the container in the containerDefinitions section of your task definition

jobs:
  deploy:
    name: Prod-Deploy
    runs-on: ubuntu-latest
    environment: development
    strategy:
      matrix:
        node-version: [18.x]

    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create IMAGE_VERSION
        run: echo "IMAGE_VERSION=$(echo ${{ github.sha }} | head -c7)-prod" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ env.IMAGE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Set IMAGE environment variable
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "image=${{ env.ECR_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ env.IMAGE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition mrsethsamuel-APITaskDefinition-prod --query taskDefinition > TaskDefinition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true